#? stdtmpl(emit="f.write") | standard
${"# Generated by natu"}

#if bgRows.len > 0:

type
  Background* = enum
    #for b in bgRows:
    ${b.name}
    #end for

block:
  #for b in bgRows:
  {.compile:"./backgrounds/${b.name}.c".}
  #end for
  {.compile:"./backgrounds.c".}

let natuBgImgData {.importc, codegenDecl:"extern const $$# $$#".}: array[Background, cstring]
let natuBgMapData {.importc, codegenDecl:"extern const $$# $$#".}: array[Background, cstring]
let natuBgPalData {.importc, codegenDecl:"extern const $$# $$#".}: array[Background, cstring]

const staticBgData: array[Background, BgData] = [
  #for i,b in bgRows:
  ${b.name}: BgData${bgDatas[i]},
  #end for
]

template data*(bg: Background): BgData = staticBgData[bg]
template palDataPtr*(bg: Background): pointer = natuBgPalData[bg]
template mapDataPtr*(bg: Background): pointer = natuBgMapData[bg]
template imgDataPtr*(bg: Background): pointer = natuBgImgData[bg]

#else:

${"# There were no backgrounds defined, create dummy interface."}

type Background* = distinct void
template data*(bg: Background): BgData = BgData()
template palDataPtr*(bg: Background): pointer = nil
template mapDataPtr*(bg: Background): pointer = nil
template imgDataPtr*(bg: Background): pointer = nil

#end if
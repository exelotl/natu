#? stdtmpl(emit="f.write") | standard
${"# Generated by natu"}

import natu/[memory, video, utils]

#if gfxRows.len > 0:

type
  Graphic* = enum
    #for g in gfxRows:
    ${g.name}
    #end for

block:
  {.compile:"./graphics.c".}

let palData {.importc:"natuGfxPalData", codegenDecl:"extern const $$# $$#".}: array[${palDataLen+1}, char]
let imgData {.importc:"natuGfxImgData", codegenDecl:"extern const $$# $$#".}: array[${imgDataLen+1}, char]

const staticGfxData: array[Graphic, GraphicData] = [
  #for i,g in gfxRows:
  ${g.name}: GraphicData${gfxDatas[i]},
  #end for
]

var palUsages {.codegenDecl:DataInEwram.}: array[${numPalettes}, uint16]

template data*(g: Graphic): GraphicData = staticGfxData[g]
template palUsage*(g: Graphic): var uint16 = palUsages[g.data.palNum]
template palDataPtr*(g: Graphic): pointer = unsafeAddr palData[g.data.palPos]
template imgDataPtr*(g: Graphic): pointer = unsafeAddr imgData[g.data.imgPos]

#else:

${"# There were no graphics defined, create a dummy interface."}

type Graphic* = distinct uint
var dummyPalUsage: uint16
template data*(g: Graphic): GraphicData = GraphicData()
template palUsage*(g: Graphic): var uint16 = dummyPalUsage
template palDataPtr*(g: Graphic): pointer = nil
template imgDataPtr*(g: Graphic): pointer = nil

#end if